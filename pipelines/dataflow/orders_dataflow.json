{
	"name": "orders_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_order_items_dl",
						"type": "DatasetReference"
					},
					"name": "orderitemsstream"
				},
				{
					"dataset": {
						"referenceName": "ds_orders_sadl",
						"type": "DatasetReference"
					},
					"name": "orderstream"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_highvalue_orders",
						"type": "DatasetReference"
					},
					"name": "highvaluesink"
				},
				{
					"dataset": {
						"referenceName": "ds_lowvalue_orders",
						"type": "DatasetReference"
					},
					"name": "lowvaluesink"
				},
				{
					"dataset": {
						"referenceName": "ds_errroneous_values",
						"type": "DatasetReference"
					},
					"name": "erroneoussink"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_item_id as string,",
				"          order_item_order_id as string,",
				"          order_item_product_id as string,",
				"          order_item_quantity as float,",
				"          order_item_subtotal as float,",
				"          order_item_price as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderitemsstream",
				"source(output(",
				"          order_id as string,",
				"          order_date as string,",
				"          order_customer_id as string,",
				"          order_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderstream",
				"orderitemsstream aggregate(groupBy(order_item_order_id),",
				"     order_item_subtotal = sum(order_item_subtotal)) ~> aggregate1",
				"aggregate1, orderstream join(order_item_order_id == order_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          order_id,",
				"          order_date,",
				"          customer_id = order_customer_id,",
				"          order_amount = order_item_subtotal,",
				"          order_status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(order_amount>500,",
				"     order_amount<=500,",
				"     disjoint: false) ~> split1@(highvalue, lowvalue, erroneous)",
				"split1@highvalue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> highvaluesink",
				"split1@lowvalue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> lowvaluesink",
				"split1@erroneous sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> erroneoussink"
			]
		}
	}
}